import { useEffect, useState } from 'react'
import { SongSection, MedleyData } from '@/types'
import { getMedleyByVideoId } from '@/lib/api/medleys'
import { logger } from '@/lib/utils/logger'

interface UseMedleyDataApiReturn {
  medleySongs: SongSection[]
  medleyTitle: string
  medleyCreator: string
  medleyDuration: number
  medleyData: MedleyData | null
  loading: boolean
  error: string | null
}

export function useMedleyDataApi(videoId: string): UseMedleyDataApiReturn {
  const [medleySongs, setMedleySongs] = useState<SongSection[]>([])
  const [medleyTitle, setMedleyTitle] = useState<string>('')
  const [medleyCreator, setMedleyCreator] = useState<string>('')
  const [medleyDuration, setMedleyDuration] = useState<number>(0)
  const [medleyData, setMedleyData] = useState<MedleyData | null>(null)
  const [loading, setLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    let isCancelled = false
    let timeoutId: NodeJS.Timeout

    async function fetchMedleyData() {
      if (!videoId) {
        setMedleySongs([])
        setMedleyTitle('')
        setMedleyCreator('')
        setMedleyDuration(0)
        setMedleyData(null)
        setLoading(false)
        setError(null)
        return
      }

      setLoading(true)
      setError(null)

      // „Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥Áí∞Â¢É„Åß„ÅÆÁÑ°Èôê„É≠„Éº„Éá„Ç£„É≥„Ç∞Èò≤Ê≠¢„ÅÆ„Åü„ÇÅ„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÇíË®≠ÂÆö
      const timeoutPromise = new Promise<never>((_, reject) => {
        timeoutId = setTimeout(() => {
          logger.warn('‚ö†Ô∏è Medley data request timed out after 30 seconds')
          reject(new Error('„É™„ÇØ„Ç®„Çπ„Éà„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'))
        }, 30000) // 30Áßí„Åß„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºàÂª∂Èï∑Ôºâ
      })

      try {
        const medleyData = await Promise.race([
          getMedleyByVideoId(videoId),
          timeoutPromise
        ])
        
        if (isCancelled) return

        if (medleyData) {
          setMedleySongs(medleyData.songs)
          setMedleyDuration(medleyData.duration)
          setMedleyTitle(medleyData.title)
          setMedleyCreator(medleyData.creator || '')
          setMedleyData(medleyData)
        } else {
          // „É°„Éâ„É¨„Éº„Éá„Éº„Çø„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÁ©∫„ÅÆÈÖçÂàó„Å´„Åô„Çã
          setMedleySongs([])
          setMedleyTitle('')
          setMedleyCreator('')
          setMedleyDuration(0)
          setMedleyData(null)
          setError(`„É°„Éâ„É¨„Éº„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü: ${videoId}`)
        }
      } catch (err) {
        if (isCancelled) return
        
        logger.error('‚ùå Error fetching medley data:', err)
        logger.info('üîç Error details for debugging:', {
          errorType: err?.constructor?.name,
          errorMessage: (err as Error)?.message || String(err),
          videoId,
          timestamp: new Date().toISOString()
        })
        
        // „Çà„ÇäË©≥Á¥∞„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊèê‰æõ
        let errorMessage = '„É°„Éâ„É¨„Éº„Éá„Éº„Çø„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'
        if (err instanceof Error) {
          if (err.message.includes('„Çø„Ç§„É†„Ç¢„Ç¶„Éà')) {
            errorMessage = '„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´ÊôÇÈñì„Åå„Åã„Åã„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
          } else if (err.message.includes('Failed to fetch')) {
            errorMessage = '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
          } else {
            errorMessage = `„Ç®„É©„Éº: ${err.message}`
          }
        }
        
        setError(errorMessage)
        setMedleySongs([])
        setMedleyTitle('')
        setMedleyCreator('')
        setMedleyDuration(0)
        setMedleyData(null)
      } finally {
        // „Çø„Ç§„É†„Ç¢„Ç¶„Éà„Çí„ÇØ„É™„Ç¢
        if (timeoutId) {
          clearTimeout(timeoutId)
        }
        
        if (!isCancelled) {
          setLoading(false)
        }
      }
    }

    fetchMedleyData()

    return () => {
      isCancelled = true
      if (timeoutId) {
        clearTimeout(timeoutId)
      }
    }
  }, [videoId])

  return {
    medleySongs,
    medleyTitle,
    medleyCreator,
    medleyDuration,
    medleyData,
    loading,
    error,
  }
}